import os
import pandas as pd

from pathlib import Path
from tqdm import tqdm
from custom_utils import *
from wbia_miew_id.helpers import get_config

from visualizer import Visualizer
from LightGlueVisualizer import LightGlueVisualizer

def main(
        visualizer: Visualizer,
        images,
        topk_idx,
        match_mat,
        dist_mat,
        ):
    # Iterate through instance-match-indicator tuples
    idx_to_match_idxs = {
        idx:{
            "topk_indices":     topk_idx[idx].tolist(),
            "match_indicators": match_mat[idx].tolist()
            }
        for idx in range(len(images))
    }
    results = []
    for query_idx, vals in tqdm(idx_to_match_idxs.items()):
        image_query = images[query_idx]

        # Extract top-k indices of matches and whether they were true matches
        topk_indices = vals["topk_indices"]
        match_indicators = vals["match_indicators"]

        # Iterate through top-k matches
        for rank, (match_idx, is_match) in enumerate(zip(topk_indices, match_indicators)):
            image_match = images[match_idx]
            
            print(f"Vizualizing query {query_idx} and match {match_idx}")

            # Generate results from the visualization method
            result = visualizer.generate(
                image_query,
                image_match,
                is_match=is_match,
                topk_indices=topk_indices
            )

            score = dist_mat[query_idx, match_idx]

            # Store computed results
            data = {
                "query_idx":    query_idx,
                "match_idx":    match_idx,
                "score":        score,
                "rank":         rank,
                "is_match":     is_match,
                **result
            }
            
            results.append(data)

        break

    return results

if __name__ == "__main__":
    #########################################################
    #                       Data Setup                      #
    #########################################################
    ### Load precomputed matches generated by MiewID
    root = Path("../wbia_miew_id/examples")
    config = get_config("../wbia_miew_id/examples/beluga_example_miewid/benchmark_model/miew_id.msv2_all.yaml")
    visualization_output_dir = Path(root, f"{config.checkpoint_dir}/{config.project_name}/{config.exp_name}/visualizations")
    df_test, test_dataset, match_results, q_pids, topk_idx, topk_names, match_mat, dist_mat, images = load_miewid_data(visualization_output_dir)

    ### Set up path to save images
    saveroot = "/srv/transparency/wildbook_prototype/data/matches/figures/lightglue/"
    os.makedirs(saveroot, exist_ok=True)

    # Set up dataframe to store computed results
    df_all = pd.DataFrame(columns=[])

    #########################################################
    #               Visualization Generation                #
    #########################################################
    lightglue_results = main(LightGlueVisualizer())
    #gradcam_results = main(GradCamVisualizer())

    #########################################################
    #               Map to common viz space                 #
    #########################################################